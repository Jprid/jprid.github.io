{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/app.routing.ts","webpack:///src/app/page.service.ts","webpack:///src/app/page/page.component.ts","webpack:///src/app/page/page.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","service","header","title","titles","getTitles","selector","templateUrl","styleUrls","AppModule","declarations","imports","providers","bootstrap","appRoutes","path","component","redirectTo","pathMatch","Routing","forRoot","PageService","links","map","item","Key","key","retVal","find","undefined","Body","content","getContent","separate","handleContactPage","separateIntoParagraphs","splitter","paragraphs","split","console","log","max","subParagraphs","index","contents","length","push","forEach","sentence","join","providedIn","PageComponent","pageService","activatedRout","paramMap","subscribe","params","get","formatContentAsArbitrarilyLargeChunksOfSentences","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, Input } from '@angular/core';\nimport { PageService } from './page.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  titles: string[];\n  constructor(private service : PageService) {\n    this.titles = this.service.getTitles();\n  }\n  header = 'John M. Pridmore';\n  title = 'J.M.P.';\n}\n","<header> \n  <h1>{{header}}</h1>\n  <div class=\"navigation-outer\">\n    <nav class=\"navigation\">\n      <a *ngFor=\"let item of titles\" [routerLink]=\"[item]\">{{item}}</a>\n    </nav>\n  </div>\n</header>\n<section>\n  <router-outlet></router-outlet>\n</section>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\nimport { PageComponent } from './page/page.component';\nimport { RouterModule } from '@angular/router';\nimport { Routing } from './app.routing';\n\n@NgModule({\n  declarations: [\n    AppComponent,  PageComponent\n  ],\n  imports: [\n    BrowserModule, RouterModule, Routing\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import {Routes, RouterModule} from '@angular/router';\r\nimport { PageComponent } from './page/page.component';\r\nconst appRoutes = [\r\n    {path: ':key', component: PageComponent},\r\n    {path: '', redirectTo: 'About', pathMatch: 'full'}\r\n];\r\n\r\nexport const Routing = RouterModule.forRoot(appRoutes);","import { Injectable } from '@angular/core';\nimport { isNull } from 'util';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PageService {\n  links = [{\n      'Key': 'About',\n      'Body': `John Pridmore is a Full-Stack Software Engineer with a focus on highly-distributed, low-latency systems.`,\n    },\n    {\n      'Key': 'Projects',\n      'Body': `https://github.com/meganpecho/VendMeUpAutomated Vending Machine\n      Automated vending machine on the Ethereum blockchain. \n      https://github.com/Jprid/Dynamic-Field-ValidatorDynamic Field Validator\n      Asynchronously accesses JSON API endpoint to collect list of customers through use of multiprocessing library. Compares customers against requirements for each field of customer information.\n      \n      https://github.com/nansta/CSC394-SeniorProjectGraduation Path Scheduler\n      Finds shortest path to graduation for masters students at DePaul under constraints. Added boolean expression tree and scraper modules. \n      \n      https://github.com/Jprid/SpaceGraphGame\n      \n      Space Graph Game\n      Finds path from one point in space (NxN array representing the \"map\" of space) to another, avoiding obstacles on the way. \n      \n      Dynamic Memory System\n      64-byte aligned heap for dynamic memory allocation. 4x faster than the memory system inherently used by C++.\n      \n      Particle System\n      Refactored legacy code that draws toliet paper roll unravelling in order to optimize performance. Code draws the particles of a toilet paper roll as it unravels. Optimizations made program run 7.82x faster. \n      `\n    },\n    {\n      'Key': 'Contact',\n      'Body': \"Email: Johnpridmore.lit@gmail.com <br> LinkedIn: Jprid<br>Github: Jprid<br>\"\n    }\n  ];\n\n  constructor() { }\n  getTitles() {\n    return this.links.map((item) => item.Key);\n  }\n\n  getContent(key : string) {\n    let retVal = this.links.find((item) => item.Key === key);\n    // console.log(retVal)\n    if (retVal === undefined)\n    {\n      return \"CONTENT NOT FOUND\"\n    }\n    return retVal.Body;\n  }\n\n  handleContactPage(key : string)\n  {\n    let content = this.getContent(key);\n    return this.separate(content, '<br>');\n  }\n\n  // paragraph here denoting an arbitrarily large chunk of sentences\n  formatContentAsArbitrarilyLargeChunksOfSentences(key : string)\n  {\n    if(key === 'Contact')\n    {\n      return this.handleContactPage(key);\n    }\n    let  content = this.getContent(key);\n    return this.separateIntoParagraphs(content);\n  }\n\n  separate(content : string, splitter : string)\n  {\n    const paragraphs = content.split(splitter);\n    console.log(paragraphs);\n    return paragraphs;\n  }\n\n  separateIntoParagraphs(content : string, max = 5, splitter = '\\.')\n  {\n    let paragraphs = [];\n    let subParagraphs = [];\n    let index = 0;\n    let contents : string[] = content.split(splitter);\n    \n    if(contents.length <= max)\n    {\n      paragraphs.push(content);\n    } else {\n      contents.forEach((sentence : string) => {\n        if(index >= max)\n        {\n          paragraphs.push(subParagraphs.join(''));\n          subParagraphs = [];\n          index = 0;\n        }\n        subParagraphs.push(`${sentence}.`);\n        index += 1;\n      });\n    }\n    return paragraphs;\n\n  }\n}\n","import { Component, OnInit} from '@angular/core';\nimport { PageService } from '../page.service';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-page',\n  templateUrl: './page.component.html',\n  styleUrls: ['./page.component.css']\n})\nexport class PageComponent implements OnInit {\n  key = '';\n  contents : string[] | any;\n  constructor(private pageService : PageService,\n     private activatedRout: ActivatedRoute) {\n  }\n\n  ngOnInit(): void {\n    this.activatedRout.paramMap.subscribe(params => {\n      this.key = params.get('key')\n      this.contents = this.pageService.formatContentAsArbitrarilyLargeChunksOfSentences(this.key);\n      console.log(this.contents);\n      \n    });\n  }\n}\n","<p *ngFor=\"let content of contents\" \n    [ngClass]=\"{'bulleted-list':key === 'Projects', 'contact-info':key === 'Contact'}\">\n    {{content}}\n</p>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}